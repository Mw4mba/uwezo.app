rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to improve readability and reduce duplication.
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Rules for the 'users' collection.
    match /users/{userId} {
      // A user can create their own document upon signing up.
      allow create: if isOwner(userId);

      // A user can read or update their own document.
      allow read, update: if isOwner(userId);

      // Rules for the 'quizAttempts' subcollection within a user document.
      match /quizAttempts/{attemptId} {
        // A user can create and read their own quiz attempts.
        allow create, read: if isOwner(userId);
      }
    }

    // Rules for the 'chats' collection.
    match /chats/{chatId} {
      // A user can read a chat document if they are a participant.
      // `get` is used for single document reads.
      allow get: if isSignedIn() && request.auth.uid in resource.data.participants;
      
      // A user can list chats (though the app doesn't do this yet, it's good practice).
      // `list` is for collection queries.
      allow list: if isSignedIn();

      // A user can create a chat document if their UID is one of the participants.
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participants;

      // Rules for the 'messages' subcollection within a chat document.
      match /messages/{messageId} {
        // Allow reading and writing messages if the user is a participant of the parent chat.
        // This uses a `get()` to check the parent document's data securely.
        allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      }
    }
  }
}
